class Result {

    /*
     * Complete the 'strangeSort' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY mapping
     *  2. STRING_ARRAY nums
     */


    public class sortObj{
        String ori;
        String real;
        int pos;
        sortObj(String s, int p){
            this.ori = s;
            this.pos = p;
        }
    }
    
    public String[] help(int[] mapping, String nums[]) {
        if(nums == null || nums.length == 0) return new String[0];
        
        List<sortObj> ls = new ArrayList<>();
        HashMap<Character, Character> map = new HashMap<>(); //wrong -> real
        for(int i : mapping) {
            map.put( (char)('0'+mapping[i]), (char)('0'+i) );
        }
        
        for(int i = 0; i < nums.length;i++) {
            sortObj obj = new sortObj(nums[i],i);
            StringBuilder sb = new StringBuilder();
            boolean zerostart = true;
            for(char c : nums[i].toCharArray()) {
                char correctc = map.get(c);
                if(zerostart && Character.getNumericValue(correctc) != 0)
                    zerostart = false;
                if(!zerostart)
                    sb.append(correctc);
            }
            obj.real = sb.toString();
            ls.add(obj);
        }
        Collections.sort(ls, new Comparator<sortObj>() {
            public int compare(sortObj a, sortObj b) {
                if(a.real.length() == b.real.length())
                    return a.real.compareTo(b.real);
                return a.real.length() - b.real.length();
                
            }
        });
        
        String[] res = new String[ls.size()];
        for(int i = 0; i < res.length; i++) {
            res[i] = ls.get(i).ori;
        }
        
        return res;
    }
    public List<String> ListToString(String[] str){
        return Arrays.asList(str);
    }
    public String[] StringToList(List<String> list){
        return list.toArray(new String[0]);
    }
    public int[] IntToList(List<Integer> list){
        return list.stream().mapToInt(i -> i).toArray();
    }
    public static List<String> strangeSort(List<Integer> mapping, List<String> nums) {
    // Write your code here
        Result res = new Result();
        String[] help = res.help(res.IntToList(mapping),res.StringToList(nums));
        return res.ListToString(help);
    }

}